-- Check if procedure exists and drop if it does
DROP PROCEDURE IF EXISTS PURGE_WORKFLOWS;

-- Create the procedure
DELIMITER //
CREATE PROCEDURE PURGE_WORKFLOWS (
    IN DeletePointOfTime BIGINT,
    IN MaximumRows BIGINT,
    OUT OutputNumberOfDeletedWorkflows BIGINT
)
BEGIN
    DECLARE DeletePoint BIGINT DEFAULT DeletePointOfTime;
    SELECT COUNT(*) INTO OutputNumberOfDeletedWorkflows FROM WF_EXEC_DONE WHERE CREATED_ON <= DeletePoint;
    IF MaximumRows < OutputNumberOfDeletedWorkflows THEN
        SET OutputNumberOfDeletedWorkflows = MaximumRows;
    END IF;

    -- Workflow data deletion
    DELETE FROM WF_STEP_EXEC_DONE WHERE EXECUTION_ID IN (SELECT EXECUTION_ID FROM WF_EXEC_DONE WHERE CREATED_ON <= DeletePoint ORDER BY CREATED_ON LIMIT MaximumRows);
    DELETE FROM WF_GROUP_EXEC_DONE WHERE EXECUTION_ID IN (SELECT EXECUTION_ID FROM WF_EXEC_DONE WHERE CREATED_ON <= DeletePoint ORDER BY CREATED_ON LIMIT MaximumRows);
    DELETE FROM WF_EXEC_DONE WHERE EXECUTION_ID IN (SELECT EXECUTION_ID FROM WF_EXEC_DONE WHERE CREATED_ON <= DeletePoint ORDER BY CREATED_ON LIMIT MaximumRows);

    -- LOG data deletion
    DELETE FROM LOG_API WHERE UTC_TIME <= DeletePoint;
    DELETE FROM LOG_EVENT WHERE UTC_TIME <= DeletePoint;
    DELETE FROM LOG_GRPC WHERE SERVER_TIME <= DeletePoint;
    DELETE FROM LOG_HTTP_REQUEST WHERE TIME_IN <= DeletePoint;
    DELETE FROM LOG_INCOMING_QUEUE_MESSAGE WHERE COMING_TIME <= DeletePoint;
    DELETE FROM LOG_RECEIVING_HTTP WHERE TIME_START <= DeletePoint;
END//
DELIMITER ;
